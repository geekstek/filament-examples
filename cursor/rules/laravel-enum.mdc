---
description: Laravel 12 枚举 (Enum) 开发规范与最佳实践
globs: src/Enums/*.php
---

# Laravel 12 枚举开发规范

## 基础结构规范

### 文件头部
```php
<?php

declare(strict_types=1);

namespace Geekstek\PropAcc\Enums;

use Filament\Support\Contracts\HasColor;
use Filament\Support\Contracts\HasDescription;
use Filament\Support\Contracts\HasLabel;
use Geekstek\Support\Enums\Concerns\HasEnumHelpers;
```

### 枚举声明
- **必须** 使用 `string` 类型的枚举值
- **必须** 实现 `HasColor`, `HasDescription`, `HasLabel` 接口
- **必须** 使用 `HasEnumHelpers` trait

```php
enum StatusEnum: string implements HasColor, HasDescription, HasLabel
{
    use HasEnumHelpers;
    
    private const TRANSLATIONS = 'package::enums/status-enum.';
    
    case ACTIVE = 'active';
    case INACTIVE = 'inactive';
    
    public const DEFAULT = self::ACTIVE;
}
```

## 命名规范

### 枚举类命名
- 使用 **PascalCase**
- 以具体业务含义命名，如 `PaymentStatus`, `BillStatus`
- 避免使用泛化名称如 `Status`, `Type`

### 枚举值命名
- 使用 **SCREAMING_SNAKE_CASE**
- 使用清晰的业务术语
- 保持简洁但具有描述性

```php
// ✅ 好的命名
case PENDING = 'pending';
case COMPLETED = 'completed';
case FAILED = 'failed';

// ❌ 避免的命名
case STATUS_1 = 'status_1';
case TEMP = 'temp';
```

## 必需方法实现

### 核心接口方法
```php
public function getLabel(): ?string
{
    return match ($this) {
        self::ACTIVE => '活跃',
        self::INACTIVE => '非活跃',
    };
}

public function getDescription(): string
{
    return match ($this) {
        self::ACTIVE => '活跃状态',
        self::INACTIVE => '非活跃状态',
    };
}

public function getColor(): string
{
    return match ($this) {
        self::ACTIVE => 'success',
        self::INACTIVE => 'gray',
    };
}
```

### 可选的 UI 增强方法
```php
public function getIcon(): string
{
    return match ($this) {
        self::ACTIVE => 'heroicon-o-check-circle',
        self::INACTIVE => 'heroicon-o-x-circle',
    };
}

public function getBadgeColor(): string
{
    return match ($this) {
        self::ACTIVE => 'green',
        self::INACTIVE => 'gray',
    };
}
```

## 业务逻辑方法

### 状态检查方法
- 使用 `is` 前缀检查具体状态
- 使用 `can` 前缀检查操作权限
- 使用 `needs` 或 `requires` 前缀检查需求

```php
// 状态检查
public function isActive(): bool
{
    return $this === self::ACTIVE;
}

// 权限检查
public function canBeEdited(): bool
{
    return $this === self::DRAFT;
}

// 需求检查
public function requiresApproval(): bool
{
    return in_array($this, [self::PENDING, self::DRAFT]);
}
```

### 状态流转方法
```php
public function getNextPossibleStatuses(): array
{
    return match ($this) {
        self::DRAFT => [self::PENDING, self::CANCELLED],
        self::PENDING => [self::APPROVED, self::REJECTED],
        self::APPROVED => [self::COMPLETED],
        default => [],
    };
}

public function isFinalStatus(): bool
{
    return in_array($this, [self::COMPLETED, self::CANCELLED]);
}
```

## 静态工厂方法

### 基础选项方法
```php
public static function getOptions(): array
{
    return collect(self::cases())
        ->mapWithKeys(fn ($status) => [$status->value => $status->getDescription()])
        ->toArray();
}
```

### 分类筛选方法
```php
public static function getActiveStatuses(): array
{
    return collect(self::cases())
        ->filter(fn ($status) => $status->isActive())
        ->mapWithKeys(fn ($status) => [$status->value => $status->getDescription()])
        ->toArray();
}

public static function getEditableStatuses(): array
{
    return [self::DRAFT, self::REJECTED];
}
```

## 高级功能方法

### 详细描述和帮助信息
```php
public function getDetailedDescription(): string
{
    return match ($this) {
        self::DRAFT => '草稿状态，可以编辑和修改',
        self::PENDING => '等待审批，不可修改',
    };
}

public function getOperationPermissions(): array
{
    return match ($this) {
        self::DRAFT => [
            'edit' => true,
            'delete' => true,
            'submit' => true,
        ],
        self::PENDING => [
            'edit' => false,
            'delete' => false,
            'submit' => false,
        ],
    };
}
```

### 业务规则和限制
```php
public function getAmountLimit(): ?float
{
    return match ($this) {
        self::CASH => 5000.00,
        self::BANK_TRANSFER => null, // 无限制
    };
}

public function isAmountAllowed(float $amount): bool
{
    $limit = $this->getAmountLimit();
    return $limit === null || $amount <= $limit;
}
```

## 国际化支持

### 翻译常量
```php
private const TRANSLATIONS = 'prop-acc::enums/payment-status.';
```

### 翻译方法（可选）
```php
public function getLabel(): ?string
{
    return match ($this) {
        self::PENDING => __(self::TRANSLATIONS . 'labels.pending'),
        self::COMPLETED => __(self::TRANSLATIONS . 'labels.completed'),
    };
}
```

## 颜色规范

### Filament 标准颜色
- `success` - 成功/完成状态
- `warning` - 警告/待处理状态  
- `danger` - 错误/失败状态
- `info` - 信息/进行中状态
- `gray` - 中性/禁用状态
- `primary` - 主要/重要状态

### 徽章颜色
- `green` - 成功
- `yellow` - 警告
- `red` - 危险
- `blue` - 信息
- `gray` - 中性
- `indigo` - 特殊状态

## 图标规范

### Heroicon 图标使用
- 使用 `heroicon-o-` 前缀的 outline 图标
- 常用图标映射：
  - `heroicon-o-check-circle` - 成功/完成
  - `heroicon-o-x-circle` - 失败/错误
  - `heroicon-o-clock` - 等待/进行中
  - `heroicon-o-pause-circle` - 暂停/冻结
  - `heroicon-o-exclamation-triangle` - 警告

## 性能优化

### 使用 match 表达式
- **优先** 使用 `match` 而不是 `switch`
- 确保所有分支都有返回值
- 对于复杂逻辑使用 `in_array()` 检查

### 集合操作优化
```php
// ✅ 推荐：使用集合链式操作
public static function getFilteredOptions(callable $filter): array
{
    return collect(self::cases())
        ->filter($filter)
        ->mapWithKeys(fn ($status) => [$status->value => $status->getDescription()])
        ->toArray();
}
```

## 测试规范

### 必须测试的方法
- 所有 `is*()` 状态检查方法
- 所有 `can*()` 权限检查方法  
- `getNextPossibleStatuses()` 状态流转
- 静态工厂方法的返回值

### 测试示例
```php
it('can check if status is active', function () {
    expect(StatusEnum::ACTIVE->isActive())->toBeTrue();
    expect(StatusEnum::INACTIVE->isActive())->toBeFalse();
});

it('returns correct next possible statuses', function () {
    $nextStatuses = StatusEnum::DRAFT->getNextPossibleStatuses();
    expect($nextStatuses)->toContain(StatusEnum::PENDING);
});
```

## 文档规范

### PHPDoc 注释
- 为每个公共方法添加简洁的中文注释
- 说明方法的业务含义而不是技术实现
- 对于复杂的业务规则添加详细说明

```php
/**
 * 检查是否可以进行支付操作
 * 
 * @return bool 当状态为已批准时返回 true
 */
public function canPay(): bool
{
    return $this === self::APPROVED;
}
```

## 常见反模式

### ❌ 避免的做法
```php
// 不要使用魔法数字
case STATUS_1 = '1';

// 不要在枚举中包含业务逻辑
public function processPayment(): void
{
    // 业务逻辑应该在 Service 层
}

// 不要使用过于复杂的嵌套逻辑
public function canDoSomething(): bool
{
    if ($this === self::ACTIVE) {
        if (/* 复杂条件 */) {
            return true;
        }
    }
    return false;
}
```

### ✅ 推荐的做法
```php
// 使用清晰的枚举值
case ACTIVE = 'active';

// 保持枚举方法简单
public function isActive(): bool
{
    return $this === self::ACTIVE;
}

// 使用 match 表达式处理多分支
public function getProcessingTime(): string
{
    return match ($this) {
        self::IMMEDIATE => '即时',
        self::STANDARD => '1-3工作日',
        self::SLOW => '3-7工作日',
    };
}
```